/**
 * @typedef {ArrayBuffer} Uint8Array
 * As an argument, it can be anything iterable containing integers
 * As a return value, it is always a uint8array
 */

/**
 * Converts a buffer to a string
 * @param {ArrayBuffer} buffer The buffer to convert to a string
 * @returns {string} The buffer converted to a string
 */
function bufferToString(buffer) {
	return String.fromCharCode(...buffer);
}

/**
 * Converts a string to a buffer
 * @param {string} str The string to convert to a buffer
 * @returns {ArrayBuffer} The string converted to a buffer
 */
function stringToBuffer(str) {
	const len = str.length;
	const buffer = new Uint8Array(len);
	for (let i = 0; i < len; i++) {
		buffer[i] = str.charCodeAt(i);
	}
	return buffer;
}

/**
 * The Request information for an HTTP request
 * All header keys must be lower case
 * @typedef {Object} HttpRequest
 * @property {string} method The method for the HTTP request. Required to be `GET` if upgrading to WebSocket
 * @property {number|string} httpVersion The version of the HTTP protocol used. Required to be `1.1` or higher if upgrading to WebSocket
 * @property {string} headers.connection The header defining the connection type
 * @property {string} headers.upgrade The header defining what protocol to upgrade to if connection is upgrade
 * @property {string} headers.sec-websocket-version The version of the WebSocket protocol to use. Required to be `13` if upgrading to WebSocket
 * @property {string} headers.sec-websocket-key The base64 16 byte random key generated by the client
 */

/**
 * Parses an incomming HTTP request
 * @param {ArrayBuffer} buffer The content of the request as an array buffer
 * @returns {HttpRequest}
 * @todo this assumes that the http request is contained within a single tcp packet
 */
function parseHttp(buffer) {
	// Splits up data on linebreaks
	const splitted = bufferToString(buffer).split('\r\n');

	// Gets data from status line
	const [ method, url, httpVersion ] = splitted.shift().split(' ');

	// Remove last empty line
	splitted.pop();

	// Converts header lines to key and value on object
	const headers = {};
	splitted.forEach((header) => {
		const index = header.indexOf(':');
		headers[header.slice(0, index).trim().toLowerCase()] = header.slice(index + 1).trim();
	});

	return {
		method: method.toUpperCase(),
		url: url.toLowerCase(),
		httpVersion: httpVersion.slice(5),
		headers
	}
}

/**
 * Makes sure HTTP request comes from same origin
 * @param {string} origin The current origin
 * @param {HttpRequest} req The HTTP request to ensure comes from same origin
 * @returns {boolean} If the request is from same origin
 */
function isSameOrigin(origin, req) {
	return headers.origin === origin.toLowerCase();
}

/**
 * The HTTP reasons
 * Customizable to add new HTTP status codes
 * @todo add jsdoc documentation
 */
const httpReasons = {
	200: "OK",
	404: "Not Found"
}

// Makes the start of an HTTP response
function makeHttpResponseStart(code) {
	return "HTTP/1.1 " + code + " " + httpReasons[code] + "\r\n" +
		"Connection: close\r\n" +
		"Date: " + new Date() + "\r\n";
}

/**
 * Makes a simple HTTP response with HTML content
 * @param {string} body The HTML content to make an HTTP response for
 * @param {number} [code=200] The HTTP status code to use. Defaults to 200
 * @returns {string} The HTTP response containing the body
 */
function makeHttpHtmlResponse(body, code = 200) {
	return makeHttpResponseStart(code) +
		"Content-Type: text/html\r\n" +
		"Content-Length: " + body.length + "\r\n" +
		"\r\n" +
		body;
}

/**
 * Makes a simple HTTP response without a body
 * @param {number} code The HTTP status code to use
 * @returns {string} The HTTP response
 */
function makeHttpResponse(code) {
	return makeHttpResponseStart() + "\r\n";
}

/**
 * Makes a simple HTTP response with customizable headers
 * A body can be concatenated onto the response if the correct headers are set manually
 * @param {number} code The HTTP status code to use
 * @param {Object} headers The headers to insert into the HTTP response
 * @returns {string} The HTTP response
 */
function makeHttpHeaderResponse(code, headers) {
	return makeHttpResponseStart(code) +
		Object.entries(headers).map(([ key, value ]) => key + ': ' + value).join('\r\n') +
		"\r\n\r\n";
}



//!!
module.exports = {
	bufferToString,
	stringToBuffer,
	parseHttp,
	httpReasons,
	makeHttpHtmlResponse,
	makeHttpHeaderResponse,
	makeHttpResponse
};
